---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-v2-cra
spec:
  params:
    # Pipeline related parameters
    - name: continuous-delivery-context-environment
      description: Name of the configmap containing the continuous delivery pipeline context environment properties
      default: environment-properties
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: docker-registry-secret
      description: Field in the secret that contains the secret used to login to docker-registry-url
      default: docker-registry-secret
    - name: ibmcloud-api
      description: The ibmcloud api
      default: "https://cloud.ibm.com"
    - name: ibmcloud-apikey-secret-key
      description: Field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: ibmcloud-region
      description: (Optional) ibmcloud region to use
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1
      default: "0"
    - name: registry-region
      description: (Optional) The ibmcloud container registry region
      default: ""
    - name: resource-group
      description: (Optional) Target resource group (name or id) for the ibmcloud login operation
      default: ""

    # Common command params
    - name: custom-script
      description: (Optional) Filepath to a custom script that is ran prior to CRA scanning
      default: ""
    - name: env-props
      description: (Optional) A custom configuration of environment properties to source before execution, ex. 'export ABC=123 export DEF=456'
      default: ""
    - name: fileignore
      description: (Optional) Filepath to .fileignore
      default: ""
    - name: ibmcloud-trace
      description: (Optional) Enables IBMCLOUD_TRACE for ibmcloud cli logging
      default: "false"
    - name: output
      description: (Optional) Prints command result to console
      default: "false"
    - name: path
      description: Directory where the repository is cloned
      default: "/artifacts"
    - name: strict
      description: (Optional) Enables strict mode for scanning
      default: "false"
    - name: toolchainid
      description: (Optional) The target toolchain id to be used. Defaults to the current toolchain id
      default: ""
    - name: verbose
      description: (Optional) Enable verbose log messages
      default: "false"

    # BOM related parameters
    - name: asset-type
      description: Security checks to run (apps, image, os, all)
      default: "all"
    - name: bom-report
      description: Filepath to store generated Bill of Materials
      default: "bom.json"
    - name: docker-build-flags
      description: (Optional) Customize docker build command for build stage scanning
      default: ""
    - name: docker-build-context
      description: (Optional) If specified, CRA will use the directory in the path parameter as docker build context
      default: "false"
    - name: dockerfile-pattern
      description: (Optional) Pattern to identify Dockerfile in the repository
      default: "Dockerfile"
    - name: docker-registry-url
      description: Registry url to use for docker login
      default: ""
    - name: docker-registry-username
      description: Username to authenticate for docker-registry-url
      default: ""
    - name: gradle-exclude-configs
      description: (Optional) Exclude gradle configurations, ex. 'runtimeClasspath,testCompileClasspath'
      default: ""
    - name: gradle-props
      description: (Optional) Customize gradle command with props for gradle dependency scanning.
      default: ""
    - name: maven-exclude-scopes
      description: (Optional) Exclude maven scopes, ex. 'test,compile'
      default: ""
    - name: nodejs-create-package-lock
      description: (Optional) Enable the task to build the package-lock.json for node.js projects
      default: "false"
    - name: prev-report
      description: (Optional) Filepath to previous BoM report to skip Dockerfile or application manifest scans
      default: ""

    # Deploy Analytic related params
    - name: deploy-report
      description: Filepath to store generated Deploy Analytic report
      default: "deploy.json"

    # Vulnerability related parameters
    - name: cveignore
      description: (Optional) File path to cveignore
      default: ""
    - name: exclude-dev
      description: (Optional) Exclude dev dependencies during vulnerability scan
      default: "false"
    - name: vulnerability-report
      description: Filepath to store generated Vulnerability report, not stored if empty
      default: "vulnerability.json"

    # User control params
    - name: cra-scan-image
      description: Image to use for `scan` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11"
    - name: dind-image
      description: image to use for the Docker-in-Docker sidecar (default to icr.io/continuous-delivery/pipeline/docker:19.03.15-dind)
      default: "icr.io/continuous-delivery/pipeline/docker:19.03.15-dind"

  stepTemplate:
    env:
      - name: PIPELINE_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: WORKSPACE_PATH
        value: $(workspaces.artifacts.path)
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: scan
      image: $(params.cra-scan-image)
      env:
        - name: API
          value: $(params.ibmcloud-api)
        - name: ENV_PROPS
          value: $(params.env-props)
        - name: REGION
          value: $(params.ibmcloud-region)
        - name: CUSTOM_SCRIPT
          value: $(params.custom-script)

        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
        - name: DOCKER_SECRET
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.docker-registry-secret)
              optional: true

        # Docker client configuration
        # Connect to the sidecar over TCP, with TLS.
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
      imagePullPolicy: Always
      workingDir: $(workspaces.artifacts.path)
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          if [ "$PIPELINE_DEBUG" = "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          if [ -n "$ENV_PROPS" ]; then
            echo "${ENV_PROPS}" > ./env-props
            source ./env-props
          fi

          # Install go cli for BOM go package dependency scanning if repo contains go.mod and go is not installed (get latest)
          if [[ $(find "$(params.path)" -name "go.mod" -type f) ]]; then
            if ! command -v go &>/dev/null; then
                echo "go.mod found, installing go cli for CRA scanning."
                curl -fsSLo- https://s.id/golang-linux | bash
                export GOROOT="/home/$USER/go"
                export GOPATH="/home/$USER/go/packages"
                export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
                go version
            fi
          fi

          if [ -n "$CUSTOM_SCRIPT" ]; then
            echo "Running custom script."
            if [ -f "$CUSTOM_SCRIPT" ]; then
                chmod +x $CUSTOM_SCRIPT  # ensure execute permissions are set
            fi
            $CUSTOM_SCRIPT
          fi

          if [ -n "$REGION" ]; then
            TOOLCHAIN_REGION=$REGION
          else
            TOOLCHAIN_REGION=$(cat /config/toolchain.json | jq -r '.region_id' | awk -F: '{print $3}')
          fi

          if [ -n "$(params.toolchainid)" ]; then
            export TOOLCHAIN_ID=$(params.toolchainid)
          else
            export TOOLCHAIN_ID=$(cat /config/toolchain.json | jq -r '.toolchain_guid')
          fi

          echo -e "\nFetching users's token"
          ibmcloud config --check-version false
          ibmcloud login -a $API --no-region --apikey $API_KEY
          SC=$?
          if [ $SC -gt 0 ]; then
            echo -e "Failed to login to ibmcloud"
            exit 1
          fi
          echo -e "Successfully logged into ibmcloud\n"

          # Install the CRA plugin if it is not installed
          CRA_VER=`ibmcloud plugin list |grep cra | awk '{print $2}'`
          if [ -z "$CRA_VER" ]; then
            ibmcloud plugin install cra -f
            STATUS=$?
            if [ $STATUS -gt 0 ]; then
              echo "Error installing CRA plugin. Exiting"
              exit 1
            fi
          else
            ibmcloud plugin update cra -f
            STATUS=$?
            if [ $STATUS -gt 0 ]; then
              echo "Error updating CRA plugin. Using version $CRA_VER"
            fi
          fi

          if [ -n "$(params.resource-group)" ]; then
            ibmcloud target -g $(params.resource-group)
          fi
          # if registry region is in the 'ibm:yp:<region>' format just keep the region part
          REGISTRY_REGION=$(echo "$(params.registry-region)" | awk -F ':' '{print $NF;}')
          if [ -n "${REGISTRY_REGION}" ]; then
            echo -e "\nUpdating IBM Cloud Container Registry region"
            # Log container registry to the appropriate region
            if ibmcloud cr region-set ${REGISTRY_REGION} > /dev/null 2>&1; then
              echo "ibmcloud container registry region set to ${REGISTRY_REGION}"
            else
              # the registry region specified is not supported - fallback on
              # using ibmcloud target -r command to rely on region affinity
              # for container registry region - for instance us-east does not have
              # a container-registry service, it is defered to us-south
              ibmcloud target -r ${REGISTRY_REGION}
            fi
            ibmcloud cr info
          fi

          ibmcloud cr login

          if [ -n "$(params.docker-registry-url)" ] && [ -n "$(params.docker-registry-username)" ] && [ -n "$DOCKER_SECRET" ]; then
            echo $DOCKER_SECRET | docker login $(params.docker-registry-url) --username $(params.docker-registry-username) --password-stdin
          elif [ -n "$(params.docker-registry-url)" ] || [ -n "$(params.docker-registry-username)" ] || [ -n "$DOCKER_SECRET" ]; then
            echo "Registry url, username, and secret are required. Continuing without authentication."
          fi

          if [ "$(params.ibmcloud-trace)" == "true" ]; then
            export IBMCLOUD_TRACE=true
          fi

          echo -e "\n\nBeginning CRA BOM Generation"
          BOM_CMD=(ibmcloud cra bom-generate --path $(params.path) --report $(params.bom-report) --asset-type $(params.asset-type) --region $TOOLCHAIN_REGION)
          if [ -n "$(params.gradle-exclude-configs)" ]; then
            BOM_CMD+=(--gradle.excludeconfigurations "$(params.gradle-exclude-configs)")
          fi
          if [ -n "$(params.gradle-props)" ]; then
            BOM_CMD+=(--gradleprops "$(params.gradle-props)")
          fi
          if [ -n "$(params.maven-exclude-scopes)" ]; then
            BOM_CMD+=(--maven.excludescopes "$(params.maven-exclude-scopes)")
          fi
          if [ "$(params.nodejs-create-package-lock)" == "true" ]; then
            BOM_CMD+=(--nodejs.createpackagelock)
          fi
          if [ -n "$(params.prev-report)" ]; then
            BOM_CMD+=(--prev-report $(params.prev-report))
          fi
          if [ "$(params.verbose)" == "true" ]; then
            BOM_CMD+=(--verbose)
          fi
          if [ -n "$(params.docker-build-flags)" ]; then
            BOM_CMD+=(--dockerbuildflags "$(params.docker-build-flags)")
          fi
          if [ "$(params.docker-build-context)" == "true" ]; then
            BOM_CMD+=(--dockerbuildcontext)
          fi
          if [ -n "$(params.dockerfile-pattern)" ]; then
            BOM_CMD+=(--dockerfilepattern "$(params.dockerfile-pattern)")
          fi
          echo "${BOM_CMD[@]}"
          "${BOM_CMD[@]}"
          BOM_STATUS=$?

          if [ "$(params.output)" == "true" ]; then
            cat $(params.bom-report)
          fi

          echo -e "\n\nBeginning CRA vulnerability scan"
          VULNERABILITY_CMD=(ibmcloud cra vulnerability-scan --bom $(params.bom-report) --report $(params.vulnerability-report) --region $TOOLCHAIN_REGION)
          if [ -n "$(params.cveignore)" ]; then
            VULNERABILITY_CMD+=(--cveignore $(params.cveignore))
          fi
          if [ "$(params.exclude-dev)" == "true" ]; then
            VULNERABILITY_CMD+=(--excludedev)
          fi
          if [ "$(params.strict)" == "true" ]; then
            VULNERABILITY_CMD+=(--strict)
          fi
          echo "${VULNERABILITY_CMD[@]}"
          "${VULNERABILITY_CMD[@]}"
          VULNERABILITY_STATUS=$?

          if [ "$(params.output)" == "true" ]; then
            cat $(params.vulnerability-report)
          fi

          echo -e "\n\nBeginning CRA Deploy Analytic"
          DEPLOY_CMD=(ibmcloud cra deployment-analyze --path $(params.path) --report $(params.deploy-report) --region $TOOLCHAIN_REGION)
          if [ -n "$(params.fileignore)" ]; then
            DEPLOY_CMD+=(--fileignore $(params.fileignore))
          fi
          if [ "$(params.strict)" == "true" ]; then
            DEPLOY_CMD+=(--strict)
          fi
          echo "${DEPLOY_CMD[@]}"
          "${DEPLOY_CMD[@]}"
          DEPLOY_STATUS=$?

          if [ "$(params.output)" == "true" ]; then
            cat $(params.deploy-report)
          fi

          if [ $(expr $BOM_STATUS + $VULNERABILITY_STATUS + $DEPLOY_STATUS) -gt 0 ]; then
            exit 1
          fi
      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /properties
          name: environment-properties
        - mountPath: /secrets
          name: secure-properties
        - mountPath: /certs/client
          name: dind-certs

  sidecars:
    - name: server
      image: $(params.dind-image)
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
          apk add e2fsprogs &&
          truncate -s 20G /tmp/disk.img &&
          mkfs.ext4 /tmp/disk.img &&
          mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: dind-certs
      emptyDir: {}
    - name: environment-properties
      configMap:
        name: $(params.continuous-delivery-context-environment)
    - name: secure-properties
      secret:
        secretName: $(params.continuous-delivery-context-secret)
