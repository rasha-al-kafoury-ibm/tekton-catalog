---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cra-terraform-scan-v2
spec:
  params:
    # Pipeline related parameters
    - name: continuous-delivery-context-environment
      description: Name of the configmap containing the continuous delivery pipeline context environment properties
      default: environment-properties
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: ibmcloud-api
      description: The ibmcloud api
      default: "https://cloud.ibm.com"
    - name: ibmcloud-apikey-secret-key
      description: Field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: ibmcloud-region
      description: (Optional) ibmcloud region to use
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1
      default: "0"
    - name: resource-group
      description: (Optional) Target resource group (name or id) for the ibmcloud login operation
      default: ""

    # Common command params
    - name: custom-script
      description: (Optional) Filepath to a custom script that is ran prior to CRA scanning
      default: ""
    - name: ibmcloud-trace
      description: (Optional) Enables IBMCLOUD_TRACE for ibmcloud cli logging
      default: "false"
    - name: output
      description: (Optional) Prints command result to console
      default: "false"
    - name: path
      description: Directory where the repository is cloned
      default: "/artifacts"
    - name: strict
      description: (Optional) Enables strict mode for scanning
      default: "false"
    - name: toolchainid
      description: (Optional) The target toolchain id to be used. Defaults to the current toolchain id
      default: ""
    - name: verbose
      description: (Optional) Enable verbose log messages
      default: "false"

    # Terraform related parameters
    - name: terraform-report
      description: Filepath to store generated Terraform report
      default: "terraform.json"
    - name: tf-dir
      description: The directory where the terraform main entry file is found
      default: ""
    - name: tf-plan
      description: (Optional) Filepath to Terraform Plan file.
      default: ""
    - name: tf-var-file
      description: (Optional) Filepath to the Terraform var-file
      default: ""
    - name: tf-version
      description: (Optional) The terraform version to use to create Terraform plan
      default: "0.15.5"
    - name: tf-policy-file
      description: (Optional) Filepath to policy profile. This file should contain "scc_goals" and "scc_goal_parameters" that will overwrite default checks
    - name: tf-format
      description: (Optional) Report format. Requires --policy-file. Supported values [OSCAL]
    - name: tf-state-file
      description: (Optional) Path of terraform state file. Requires --format to be set to OSCAL.

    # User control params
    - name: cra-scan-image
      description: Image to use for `scan` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11"

  stepTemplate:
    env:
      - name: PIPELINE_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: WORKSPACE_PATH
        value: $(workspaces.artifacts.path)
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: VAR_FILE
        value: $(params.tf-var-file)

  steps:
    - name: terraform-scan
      image: $(params.cra-scan-image)
      envFrom:
        - configMapRef:
            name: environment-properties
        - secretRef:
            name: secure-properties
      env:
        - name: API
          value: $(params.ibmcloud-api)
        - name: REGION
          value: $(params.ibmcloud-region)
        - name: CUSTOM_SCRIPT
          value: $(params.custom-script)

        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
      imagePullPolicy: Always
      workingDir: $(workspaces.artifacts.path)
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          if [ "$PIPELINE_DEBUG" = "1" ]; then
            pwd
            env
            trap env EXIT
            set -x +e
          fi

          if [ -n "$CUSTOM_SCRIPT" ]; then
            echo "Running custom script."
            if [ -f "$CUSTOM_SCRIPT" ]; then
                chmod +x $CUSTOM_SCRIPT  # ensure execute permissions are set
            fi
            $CUSTOM_SCRIPT
          fi

          if [ "$(params.ibmcloud-trace)" == "true" ]; then
            export IBMCLOUD_TRACE=true
          fi

          if [ -n "$REGION" ]; then
            TOOLCHAIN_REGION=$REGION
          else
            TOOLCHAIN_REGION=$(cat /config/toolchain.json | jq -r '.region_id' | awk -F: '{print $3}')
          fi

          if [ -n "$(params.toolchainid)" ]; then
            export TOOLCHAIN_ID=$(params.toolchainid)
          else
            export TOOLCHAIN_ID=$(cat /config/toolchain.json | jq -r '.toolchain_guid')
          fi

          echo -e "\nFetching users's token"
          ibmcloud config --check-version false
          ibmcloud login -a $API --no-region --apikey $API_KEY
          SC=$?
          if [ $SC -gt 0 ]; then
            echo -e "Failed to login to ibmcloud"
            exit 1
          fi
          echo -e "Successfully logged into ibmcloud\n"

          # Install the CRA plugin if it is not installed
          CRA_VER=`ibmcloud plugin list |grep cra | awk '{print $2}'`
          if [ -z "$CRA_VER" ]; then
            ibmcloud plugin install cra -f
            STATUS=$?
            if [ $STATUS -gt 0 ]; then
              echo "Error installing CRA plugin. Exiting"
              exit 1
            fi
          else
            ibmcloud plugin update cra -f
            if [ $STATUS -gt 0 ]; then
              echo "Error updating CRA plugin. Using version $CRA_VER"
            fi
          fi

          TARGET_CMD=(ibmcloud target -r $TOOLCHAIN_REGION)
          if [ -n "$(params.resource-group)" ]; then
            TARGET_CMD+=(-g "$(params.resource-group)")
          fi
          echo "${TARGET_CMD[@]}"
          "${TARGET_CMD[@]}"

          cd $(params.path)
          echo -e "\n\nBeginning CRA Terraform Analyzer"

          if [ "$(params.tf-dir)" ]; then
            cd $(params.tf-dir)
          fi

          TF_PLAN=$(params.tf-plan)

          if ! [ "$(params.tf-plan)" ]; then
            TF_PLAN="terraformPlanCLI.json"

            echo -e "\n\nInstalling Terraform $(params.tf-version)"
            wget --quiet https://releases.hashicorp.com/terraform/"$(params.tf-version)"/terraform_"$(params.tf-version)"_linux_amd64.zip
            unzip terraform_"$(params.tf-version)"_linux_amd64.zip
            mv terraform /usr/bin

            terraform init

            if [ -n "$VAR_FILE" ]; then
              terraform plan -out=tfplan.binary -var-file=$VAR_FILE
              terraform show -json tfplan.binary > $TF_PLAN
            else
              terraform plan -out=tfplan.binary
              terraform show -json tfplan.binary > $TF_PLAN
            fi

            TF_PLAN_STATUS=$?
            if [ $(expr $TF_PLAN_STATUS) -gt 0 ]; then
              exit 1
            fi
          fi

          TERRAFORM_CMD=(ibmcloud cra tf --tf-plan $TF_PLAN --report $(params.terraform-report))
          if [ "$(params.verbose)" == "true" ]; then
            TERRAFORM_CMD+=(--verbose)
          fi
          if [ "$(params.strict)" == "true" ]; then
            TERRAFORM_CMD+=(--strict)
          fi
          if [ "$(params.tf-policy-file)" ]; then
            TERRAFORM_CMD+=(--policy-file $(params.tf-policy-file))
          fi
          if [ "$(params.tf-format)" ]; then
            TERRAFORM_CMD+=(--tf-format $(params.tf-format))
          fi
          if [ "$(params.tf-state-file)" ]; then
            TERRAFORM_CMD+=(--state-file $(params.tf-state-file))
          fi
          echo "${TERRAFORM_CMD[@]}"
          "${TERRAFORM_CMD[@]}"
          TERRAFORM_STATUS=$?

          if [ "$(params.output)" == "true" ]; then
            cat $(params.terraform-report)
          fi

          if [ $(expr $TERRAFORM_STATUS) -gt 0 ]; then
            exit 1
          fi
      volumeMounts:
        - mountPath: /config
          name: config-volume
        - mountPath: /properties
          name: environment-properties
        - mountPath: /secrets
          name: secure-properties

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: environment-properties
      configMap:
        name: $(params.continuous-delivery-context-environment)
    - name: secure-properties
      secret:
        secretName: $(params.continuous-delivery-context-secret)
